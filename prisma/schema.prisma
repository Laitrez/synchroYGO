generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model card {
  id              Int         @id @default(autoincrement())
  name            String
  desc            String      @db.LongText
  name_en         String
  ygoprodecUrl    String      @map("ygoprodeck_url")
  betaId          Int?         @map("beta_id")
  konamiId        Int?         @map("konami_id")
  mdRarity        String?      @map("md_rarity")
  deck_cards      deckCards[]
  cardTypeId      Int?
  cardRaceId      Int?
  cardArchetypeId Int?

  type      cardType?      @relation(fields: [cardTypeId], references: [id])
  race      cardRace?      @relation(fields: [cardRaceId], references: [id])
  archetype cardArchetype? @relation(fields: [cardArchetypeId], references: [id])
  userCards userCards[]
  cardSets  cardSets[]    @relation("CardSetsRelation")
  formats   formats[]      @relation("CardFormatsRelation")
  cardPrice   cardPrice[]      @relation("CardPriceRelation")
}

model cardSets {
  id            Int    @id @default(autoincrement())
  setName       String @map("set_name")
  setCode       String @map("set_code")
  setRarity     String @map("set_rarity")
  setRarityCode String @map("set_rarity_code")
  setPrice      String @map("set_price")
  card          card[] @relation("CardSetsRelation")

  @@map("card_sets")
}

model cardPrice {
  id Int @id @default(autoincrement())

  cardmarketPrice   String @map("cardmarket_price")
  tcgplayerPrice    String @map("tcgplayer_price")
  ebayPrice         String @map("ebay_price")
  amazonPrice       String @map("amazon_price")
  coolstuffincPrice String @map("coolstuffinc_price")
  cards card[] @relation("CardPriceRelation")

  @@map("card_price")
}

model cardType {
  id                Int    @id @default(autoincrement())
  type              String
  humanReadableType String @map("human_readable_type")
  frameType         String @map("frame_type")
  card              card[]

  @@map("card_type")
}

model cardRace {
  id   Int    @id @default(autoincrement())
  name String
  card card[]

  @@map("card_race")
}

model cardArchetype {
  id   Int    @id @default(autoincrement())
  name String
  card card[]

  @@map("card_archetype")
}

model formats {
  id    Int    @id @default(autoincrement())
  name  String
  cards card[] @relation("CardFormatsRelation")
}

model decks {
  id            Int         @id @default(autoincrement())
  name          String      @unique @db.VarChar(255)
  creation_date DateTime    @db.Date
  is_public     Boolean
  cards         deckCards[]
  rating        rating[]
}

model deckCards {
  occurs   Int
  card_id  Int   @map("cardId")
  card     card  @relation(fields: [card_id], references: [id])
  decks_id Int   @map("deckId")
  decks    decks @relation(fields: [decks_id], references: [id])

  @@id([card_id, decks_id])
  @@map("deck_cards")
}

model doctrine_migration_versions {
  version        String    @id
  executed_at    DateTime? @db.DateTime(0)
  execution_time Int?
}

model rating {
  id      Int   @id @default(autoincrement())
  rate    Int
  user_id Int
  deck_id Int
  decks   decks @relation(fields: [deck_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  users   users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model userCards {
  id        Int     @id @default(autoincrement())
  favorites Boolean
  occurs    Int     @default(0)

  user_id Int
  users   users @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  cardId Int
  card   card @relation(fields: [cardId], references: [id])

  @@map("user_cards")
}

model users {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  email      String      @db.VarChar(255)
  password   String      @db.VarChar(255)
  create_at  DateTime    @db.Date
  delete_at  DateTime?   @db.Date
  rating     rating[]
  user_cards userCards[]
}
